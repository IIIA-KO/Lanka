// <auto-generated />
using System;
using Lanka.Modules.Analytics.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lanka.Modules.Analytics.Infrastructure.Migrations
{
    [DbContext(typeof(AnalyticsDbContext))]
    partial class AnalyticsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("analytics")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lanka.Common.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_inbox_messages");

                    b.ToTable("inbox_messages", "analytics");
                });

            modelBuilder.Entity("Lanka.Common.Infrastructure.Inbox.InboxMessageConsumer", b =>
                {
                    b.Property<Guid>("InboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("inbox_message_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.HasKey("InboxMessageId", "Name")
                        .HasName("pk_inbox_message_consumers");

                    b.ToTable("inbox_message_consumers", "analytics");
                });

            modelBuilder.Entity("Lanka.Common.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", "analytics");
                });

            modelBuilder.Entity("Lanka.Common.Infrastructure.Outbox.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("OutboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("outbox_message_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.HasKey("OutboxMessageId", "Name")
                        .HasName("pk_outbox_message_consumers");

                    b.ToTable("outbox_message_consumers", "analytics");
                });

            modelBuilder.Entity("Lanka.Modules.Analytics.Domain.InstagramAccounts.Category", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("pk_categories");

                    b.ToTable("categories", "analytics");

                    b.HasData(
                        new
                        {
                            Name = "None"
                        },
                        new
                        {
                            Name = "Cooking and Food"
                        },
                        new
                        {
                            Name = "Fashion and Style"
                        },
                        new
                        {
                            Name = "Clothing and Footwear"
                        },
                        new
                        {
                            Name = "Horticulture"
                        },
                        new
                        {
                            Name = "Animals"
                        },
                        new
                        {
                            Name = "Cryptocurrency"
                        },
                        new
                        {
                            Name = "Technology"
                        },
                        new
                        {
                            Name = "Travel"
                        },
                        new
                        {
                            Name = "Education"
                        },
                        new
                        {
                            Name = "Fitness"
                        },
                        new
                        {
                            Name = "Art"
                        },
                        new
                        {
                            Name = "Photography"
                        },
                        new
                        {
                            Name = "Music"
                        },
                        new
                        {
                            Name = "Sports"
                        },
                        new
                        {
                            Name = "Health and Wellness"
                        },
                        new
                        {
                            Name = "Gaming"
                        },
                        new
                        {
                            Name = "Parenting"
                        },
                        new
                        {
                            Name = "DIY and Crafts"
                        },
                        new
                        {
                            Name = "Literature"
                        },
                        new
                        {
                            Name = "Science"
                        },
                        new
                        {
                            Name = "History"
                        },
                        new
                        {
                            Name = "News"
                        },
                        new
                        {
                            Name = "Politics"
                        },
                        new
                        {
                            Name = "Finance"
                        },
                        new
                        {
                            Name = "Environment"
                        },
                        new
                        {
                            Name = "Real Estate"
                        },
                        new
                        {
                            Name = "Automobiles"
                        },
                        new
                        {
                            Name = "Movies and TV"
                        },
                        new
                        {
                            Name = "Comedy"
                        },
                        new
                        {
                            Name = "Home Decor"
                        },
                        new
                        {
                            Name = "Relationships"
                        },
                        new
                        {
                            Name = "Self Improvement"
                        },
                        new
                        {
                            Name = "Entrepreneurship"
                        },
                        new
                        {
                            Name = "Legal Advice"
                        },
                        new
                        {
                            Name = "Marketing"
                        },
                        new
                        {
                            Name = "Mental Health"
                        },
                        new
                        {
                            Name = "Personal Development"
                        },
                        new
                        {
                            Name = "Religion and Spirituality"
                        },
                        new
                        {
                            Name = "Social Media"
                        });
                });

            modelBuilder.Entity("Lanka.Modules.Analytics.Domain.InstagramAccounts.InstagramAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdvertisementAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("advertisement_account_id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category_name");

                    b.Property<string>("FacebookPageId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("facebook_page_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("CategoryName")
                        .HasDatabaseName("ix_accounts_category_name");

                    b.ToTable("accounts", "analytics");
                });

            modelBuilder.Entity("Lanka.Modules.Analytics.Domain.InstagramAccounts.Tokens.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<DateTimeOffset>("ExpiresAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at_utc");

                    b.Property<Guid>("InstagramAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("instagram_account_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_tokens");

                    b.HasIndex("InstagramAccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_tokens_instagram_account_id");

                    b.ToTable("tokens", "analytics");
                });

            modelBuilder.Entity("Lanka.Modules.Analytics.Domain.InstagramAccounts.InstagramAccount", b =>
                {
                    b.HasOne("Lanka.Modules.Analytics.Domain.InstagramAccounts.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accounts_categories_category_name");

                    b.OwnsOne("Lanka.Modules.Analytics.Domain.InstagramAccounts.Metadata", "Metadata", b1 =>
                        {
                            b1.Property<Guid>("InstagramAccountId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("FollowersCount")
                                .HasColumnType("integer")
                                .HasColumnName("metadata_followers_count");

                            b1.Property<string>("Id")
                                .HasColumnType("text")
                                .HasColumnName("metadata_id");

                            b1.Property<long>("IgId")
                                .HasColumnType("bigint")
                                .HasColumnName("metadata_ig_id");

                            b1.Property<int>("MediaCount")
                                .HasColumnType("integer")
                                .HasColumnName("metadata_media_count");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("metadata_user_name");

                            b1.HasKey("InstagramAccountId");

                            b1.ToTable("accounts", "analytics");

                            b1.WithOwner()
                                .HasForeignKey("InstagramAccountId")
                                .HasConstraintName("fk_accounts_accounts_id");
                        });

                    b.Navigation("Category");

                    b.Navigation("Metadata")
                        .IsRequired();
                });

            modelBuilder.Entity("Lanka.Modules.Analytics.Domain.InstagramAccounts.Tokens.Token", b =>
                {
                    b.HasOne("Lanka.Modules.Analytics.Domain.InstagramAccounts.InstagramAccount", "InstagramAccount")
                        .WithOne("Token")
                        .HasForeignKey("Lanka.Modules.Analytics.Domain.InstagramAccounts.Tokens.Token", "InstagramAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tokens_accounts_instagram_account_id");

                    b.Navigation("InstagramAccount");
                });

            modelBuilder.Entity("Lanka.Modules.Analytics.Domain.InstagramAccounts.InstagramAccount", b =>
                {
                    b.Navigation("Token");
                });
#pragma warning restore 612, 618
        }
    }
}
